{"version":3,"sources":["components/Home.jsx","components/Projects.jsx","components/Resume.jsx","components/Contacts.jsx","styles/theme.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","className","Projects","Resume","Contacts","theme","createMuiTheme","palette","primary","main","secondary","light","contrastText","contrastThreshold","tonalOffset","App","ThemeProvider","AppBar","position","Toolbar","Button","component","Link","to","color","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RAYeA,MATf,WACE,OACE,yBAAKC,UAAU,QACb,oCACA,8DCKSC,MATf,WACE,OACE,yBAAKD,UAAU,QACb,wCACA,8DCKSE,MATf,WACE,OACE,yBAAKF,UAAU,QACb,sCACA,8DCKSG,MATf,WACE,OACE,yBAAKH,UAAU,QACb,wCACA,8D,QCcSI,EAnBDC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CAEPC,KAAM,WAIRC,UAAW,CACTC,MAAO,UACPF,KAAM,UAENG,aAAc,WAEhBC,kBAAmB,EAEnBC,YAAa,MCTF,SAASC,IACtB,OACE,kBAAC,IAAD,KACE,6BACE,kBAACC,EAAA,EAAD,CAAeX,MAAOA,GACpB,kBAACY,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAG,IAAIC,MAAM,WAAtC,UAGA,kBAACJ,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAG,YAAYC,MAAM,WAA9C,YAGA,kBAACJ,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAG,UAAUC,MAAM,WAA5C,UAGA,kBAACJ,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAG,YAAYC,MAAM,WAA9C,eAQN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UChCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAClB,EAAD,OAEFmB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.29276eeb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Temp.css\";\n\nfunction Home() {\n  return (\n    <div className='Temp'>\n      <h2>Home</h2>\n      <p>Website under construction...</p>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"../styles/Temp.css\";\n\nfunction Projects() {\n  return (\n    <div className='Temp'>\n      <h2>Projects</h2>\n      <p>Website under construction...</p>\n    </div>\n  );\n}\n\nexport default Projects;\n","import React from \"react\";\nimport \"../styles/Temp.css\";\n\nfunction Resume() {\n  return (\n    <div className='Temp'>\n      <h2>Resume</h2>\n      <p>Website under construction...</p>\n    </div>\n  );\n}\n\nexport default Resume;\n","import React from \"react\";\nimport \"../styles/Temp.css\";\n\nfunction Contacts() {\n  return (\n    <div className='Temp'>\n      <h2>Contacts</h2>\n      <p>Website under construction...</p>\n    </div>\n  );\n}\n\nexport default Contacts;\n","import { createMuiTheme } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#0f4c75',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#bbe1fa',\n      main: '#1b262c',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#3282b8',\n    },\n    contrastThreshold: 3,\n\n    tonalOffset: 0.2,\n  },\n});\nexport default theme;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { AppBar, Toolbar, Button, ThemeProvider } from \"@material-ui/core\";\nimport Home from \"./components/Home\";\nimport Projects from \"./components/Projects\";\nimport Resume from \"./components/Resume\";\nimport Contacts from \"./components/Contacts\";\nimport theme from \"./styles/theme\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ThemeProvider theme={theme}>\n          <AppBar position='static'>\n            <Toolbar>\n              <Button component={Link} to='/' color='inherit'>\n                Ziyang\n              </Button>\n              <Button component={Link} to='/projects' color='inherit'>\n                Projects\n              </Button>\n              <Button component={Link} to='/resume' color='inherit'>\n                Resume\n              </Button>\n              <Button component={Link} to='/contacts' color='inherit'>\n                Contacts\n              </Button>\n            </Toolbar>\n          </AppBar>\n        </ThemeProvider>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path='/projects'>\n            <Projects />\n          </Route>\n          <Route path='/resume'>\n            <Resume />\n          </Route>\n          <Route path='/contacts'>\n            <Contacts />\n          </Route>\n          <Route path='/'>\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}